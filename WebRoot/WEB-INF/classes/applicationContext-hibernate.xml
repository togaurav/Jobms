<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
			  "http://www.springframework.org/dtd/spring-beans-2.0.dtd">


<!--
	- Application context definition for Petclinic on Hibernate.
-->
<beans>

	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
<!--  	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc-mysql.properties</value>
		</property>
	</bean>
-->


	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Local DataSource that works in any environment -->

	<!-- 动态数据源的父类,其中配置的参数为子数据库的default值 -->
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxPoolSize">
			<value>${jdbc.maxPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${jdbc.minPoolSize}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${jdbc.idleConnectionTestPeriod}
			</value>
		</property>
		<property name="maxIdleTime">
			<value>${jdbc.maxIdleTime}</value>
		</property>
	</bean>

	<!-- 子数据源,只读数据源热read01,只需对url,user,password重新赋值 -->
	<bean id="read01" destroy-method="close" parent="parentDataSource">
		<property name="jdbcUrl">
			<value>${jdbc.read.db02.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.read.db02.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.read.db02.password}</value>
		</property>
	</bean>

	<!-- 子数据源,写操作主库,无需修改配置参数 -->
	<bean id="write" parent="parentDataSource"></bean>

	<!-- 动态数据源 -->
	<bean id="dataSource"
		class="com.framework.core.service.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="write" value-ref="write" />
				<entry key="read01" value-ref="read01" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="write" />
		<property name="dataSourceKey">
			<ref local="dynamicDataSourceKey" />
		</property>
	</bean>
	<!-- 读写管理 -->
	<bean id="dynamicDataSourceKey"
		class="com.framework.core.service.datasource.DynamicDataSourceKeyImpl">
		<property name="readDateSourceMap">
			<map key-type="java.lang.String">
				<entry key="read01" value="read01" />
			</map>
		</property>
		<property name="writeKey">
			<value>write</value>
		</property>
	</bean>
	<!-- Session Factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事务管理拦截器 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly
				</prop>
				<prop key="is*">PROPAGATION_REQUIRED,readOnly
				</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly
				</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly
				</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	
	<!-- 动态数据源拦截器 -->
	<bean id="dynamicDataSourceInterceptor"
		class="com.framework.core.service.datasource.DynamicDataSourceInterceptor">
		<property name="attributes">
			<props>
				<prop key="query*">read</prop>
				<prop key="is*">read</prop>
				<prop key="find*">read</prop>
				<prop key="get*">read</prop>
				<prop key="if*">read</prop>
				<prop key="count*">read</prop>
				<prop key="*">write</prop>
			</props>
		</property>
		<property name="dataSourceKey">
			<ref bean="dynamicDataSourceKey" />
		</property>
	</bean>
	<!-- 根据Name匹配拦截器 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
				<value>*Mgr</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<!-- 指定获取数据源的Interceptor -->
				<value>dynamicDataSourceInterceptor</value>
				<!-- 事务管理的Interceptor -->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- JNDI DataSource for J2EE environments -->
	<!-- Hibernate SessionFactory -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="baseDao" abstract="true">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		<property name="jdbcTemplate">
			<ref local="jdbcTemplate" />
		</property>
	</bean>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
	<!--  ========================= Service DAO Definitions =========================== -->				

	<import resource="classpath:/com/ganshar/user/applicationContext-hibernate.xml"/>
	<import resource="classpath:/com/ganshar/resume/applicationContext-hibernate.xml"/>
    <import resource="classpath:/com/ganshar/match/applicationContext-hibernate.xml"/>
     <import resource="classpath:/com/ganshar/ability/applicationContext-hibernate.xml"/>
      <import resource="classpath:/com/ganshar/job/applicationContext-hibernate.xml"/>
      <import resource="classpath:/com/ganshar/dictionary/applicationContext-hibernate.xml"/>      
</beans>